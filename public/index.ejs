<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8">
  <title>Sentences App</title>
  <link rel="stylesheet" href="./styles.css">
</head>

<body>
  <h1>Sentences App</h1>

  <form id="create-form">
    <label for="category">Category:</label>
    <input type="text" id="category" name="category" required>

    <label for="text">Text:</label>
    <textarea id="text" name="text" required></textarea>

    <label for="benefit">Benefit:</label>
    <input type="number" id="benefit" name="benefit" min="0" required>

    <label for="none">None:</label>
    <input type="number" id="none" name="none" min="0" required>

    <label for="education">Education:</label>
    <input type="number" id="education" name="education" min="0" required>

    <label for="tech">Tech:</label>
    <input type="number" id="tech" name="tech" min="0" required>

    <label for="soft">Soft:</label>
    <input type="number" id="soft" name="soft" min="0" required>

    <label for="responsibility">Responsibility:</label>
    <input type="number" id="responsibility" name="responsibility" min="0" required>

    <label for="experience">Experience:</label>
    <input type="number" id="experience" name="experience" min="0" required>

    <input type="submit" value="Create Sentence">
  </form>



  <div id="pagination">
    <input type="checkbox" id="order" name="order" value="asc">
    <button id="prev-button" onclick="prevPage()">&lt;</button>
    <span id="page-number">Page: 1</span>
    <button id="next-button" onclick="nextPage()">&gt;</button>
  </div>

  <table id="sentences-table">
    <thead>
      <tr>
        <th>Category</th>
        <th>Text</th>
        <th>Skills</th>
        <th>Actions</th>
      </tr>
    </thead>
    <tbody>
      <!-- Sentences will be dynamically added here -->
    </tbody>
  </table>

  <script>
    let currentPage = 0;
    const pageSize = 10;
    // Fetch sentences from the API and populate the table
    function fetchSentences(event) {

      if (event) {
        event.preventDefault();
      }

      const order = document.querySelector('#order').checked ? 'desc' : 'asc';
      const authToken = 'your-auth-token'; // Replace with your actual authentication token
      const headers = new Headers();
      headers.append('Authorization', `Bearer ${authToken}`);

      const url = `<%= process.env.API_URL %>/api/sentences?order=${order}&page=${currentPage}&pageSize=${pageSize}`;

      fetch(url, {
        headers: headers
      })
        .then(response => response.json())
        .then(sentences => {
          const tableBody = document.querySelector('#sentences-table tbody');
          tableBody.innerHTML = '';

          sentences.forEach(sentence => {
            const row = document.createElement('tr');
            row.innerHTML = `
                      <td>${sentence.category}</td>
                      <td>${sentence.text}</td>
                      <td>${JSON.stringify(sentence.skills)}</td>
                      <td class="actions">
                        <button onclick="deleteSentence('${sentence.id}')">Delete</button>
                        <button onclick="updateSentence('${sentence.id}')">Update</button>
                      </td>
                    `;
            tableBody.appendChild(row);
          });
        })
        .catch(error => {
          console.error('Error fetching sentences:', error);
        });
    }

    // Create a new sentence
    function createSentence(event) {
      event.preventDefault();

      const category = document.querySelector('#category').value;
      const text = document.querySelector('#text').value;
      const benefit = parseInt(document.querySelector('#benefit').value);
      const none = parseInt(document.querySelector('#none').value);
      const education = parseInt(document.querySelector('#education').value);
      const tech = parseInt(document.querySelector('#tech').value);
      const soft = parseInt(document.querySelector('#soft').value);
      const responsibility = parseInt(document.querySelector('#responsibility').value);
      const experience = parseInt(document.querySelector('#experience').value);

      const skills = {
        benefit,
        none,
        education,
        tech,
        soft,
        responsibility,
        experience
      };

      const sentence = {
        category,
        text,
        skills
      };

      const authToken = 'your-auth-token'; // Replace with your actual authentication token
      const headers = new Headers();
      headers.append('Authorization', `Bearer ${authToken}`);
      headers.append('Content-Type', 'application/json');

      fetch('http://<%= process.env.API_URL %>/api/sentences', {
        method: 'POST',
        headers: headers,
        body: JSON.stringify(sentence)
      })
        .then(() => {
          document.querySelector('#category').value = '';
          document.querySelector('#text').value = '';
          document.querySelector('#benefit').value = '';
          document.querySelector('#none').value = '';
          document.querySelector('#education').value = '';
          document.querySelector('#tech').value = '';
          document.querySelector('#soft').value = '';
          document.querySelector('#responsibility').value = '';
          document.querySelector('#experience').value = '';
          fetchSentences();
        })
        .catch(error => {
          console.error('Error creating sentence:', error);
        });
    }

    // Delete a sentence
    function deleteSentence(sentenceId) {
      const authToken = 'your-auth-token'; // Replace with your actual authentication token
      const headers = new Headers();
      headers.append('Authorization', `Bearer ${authToken}`);

      if (confirm('Are you sure you want to delete this sentence?')) {
        fetch(`http://<%= process.env.API_URL %>/api/sentences/${sentenceId}`, {
          method: 'DELETE',
          headers: headers
        })
          .then(() => {
            fetchSentences();
          })
          .catch(error => {
            console.error('Error deleting sentence:', error);
          });
      }
    }

    // Update a sentence
    function updateSentence(sentenceId) {
      // Replace this function with your own implementation of sentence update logic
      alert(`Update sentence with ID: ${sentenceId}`);
    }


    // Event listener for form submission
    document.querySelector('#create-form').addEventListener('submit', createSentence);

    // Function to navigate to the previous page
    function prevPage() {
      if (currentPage > 1) {
        currentPage--;
        document.querySelector('#page-number').textContent = `Page: ${currentPage}`;
        fetchSentences();
      }
    }

    // Function to navigate to the next page
    function nextPage() {
      currentPage++;
      document.querySelector('#page-number').textContent = `Page: ${currentPage}`;
      fetchSentences();
    }


    // Initial fetch to populate the table
    fetchSentences();
  </script>
</body>

</html>